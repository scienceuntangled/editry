[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ben Raymond. Author, maintainer. Adrien Ickowicz. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Raymond B, Ickowicz (2023). editry: R Bindings editly NodeJS Package. R package version 0.2.2, https://github.com/scienceuntangled/editry.","code":"@Manual{,   title = {editry: R Bindings to the editly NodeJS Package},   author = {Ben Raymond and Adrien Ickowicz},   year = {2023},   note = {R package version 0.2.2},   url = {https://github.com/scienceuntangled/editry}, }"},{"path":"/index.html","id":"editry","dir":"","previous_headings":"","what":"R Bindings to the editly NodeJS Package","title":"R Bindings to the editly NodeJS Package","text":"editry provides R bindings editly, “tool framework declarative NLE (non-linear video editing) using Node.js ffmpeg. Editly allows easily programmatically create video set clips, images, audio titles, smooth transitions music overlaid.”","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R Bindings to the editly NodeJS Package","text":"editry can used, either need install editly npm package, docker running system editly docker image pulled. need . install editly npm: automatically install system binaries node (via noder::nr_install_node()) ffmpeg (via er_install_ffmpeg()) already present system. (ffmpeg installer works Windows Linux stage. platforms (e.g. Mac) currently need install ffmpeg .) Alternatively, install docker pull appropriate image, example: (scienceuntangled/editly docker image uses modified version editly. editly docker images can used, support logo_* parameters er_header er_spec.)","code":"install.packages(\"editry\", repos = c(\"https://openvolley.r-universe.dev\",                                      \"https://cloud.r-project.org\")) ## or  ## install.packages(\"remotes\") ## if needed remotes::install_github(\"scienceuntangled/editry\") library(editry) er_install_editly() docker pull scienceuntangled/editly"},{"path":"/index.html","id":"example-usage","dir":"","previous_headings":"","what":"Example usage","title":"R Bindings to the editly NodeJS Package","text":"sequence operations editly performs produce video called “edit spec”. See editly GitHub page details examples. Typically spec consists sequence clips, along header parameters control aspects overall video. clip contains one layers. Let’s start two simple clips: Now can create spec defines steps required build video: compile video. use fast option generate low-quality preview: Note: using editly via docker, use er_exec_docker instead er_exec_wait.","code":"clips <- list(     er_clip_title2(duration = 3, text = \"Title slide\",                    transition = er_transition(name = \"windowslice\")),     er_clip_image(duration = 3, zoom_direction = \"out\",                   path = \"https://jeroen.github.io/images/Rlogo.png\")) outfile <- tempfile(fileext = \".mp4\") my_spec <- er_spec(clips = clips , out_path = outfile,                    allow_remote_requests = TRUE) ## allow_remote_requests allows us to use a remote URL for the image source er_exec_wait(spec = my_spec, fast = TRUE)"},{"path":"/index.html","id":"example-2","dir":"","previous_headings":"","what":"Example 2","title":"R Bindings to the editly NodeJS Package","text":"clip video, bit decoration added.","code":"my_video <- \"https://github.com/openvolley/ovdata/raw/master/inst/extdata/video/2019_03_01-KATS-BEDS-clip.mp4\" my_logo <- \"https://github.com/openvolley/community/raw/master/docs/talks/common/ovlogo-blur.png\"  clips <- list(     ## the video segment     er_clip_video(path = my_video, cut_from = 1, cut_to = 8),     ## add an outro banner with logo     er_clip(duration = 1.5, layers = list(er_layer_fill_color(),                                           er_layer_image(path = my_logo))),     ##  and a blank finishing screen     er_clip_pause(duration = 0.25))  outfile <- tempfile(fileext = \".mp4\") my_spec <- er_spec(clips = clips, out_path = outfile,                    allow_remote_requests = TRUE)"},{"path":"/reference/editry.html","id":null,"dir":"Reference","previous_headings":"","what":"editry — editry","title":"editry — editry","text":"R bindings editly NodeJS, declarative video editing https://github.com/mifi/editly/.","code":""},{"path":"/reference/er_add_ffmpeg_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Add the path to ffmpeg to the system path — er_add_ffmpeg_path","title":"Add the path to ffmpeg to the system path — er_add_ffmpeg_path","text":"ffmpeg can already seen system, system path changed. Otherwise, system path prepended ffmpeg path.","code":""},{"path":"/reference/er_add_ffmpeg_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add the path to ffmpeg to the system path — er_add_ffmpeg_path","text":"","code":"er_add_ffmpeg_path()"},{"path":"/reference/er_add_ffmpeg_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add the path to ffmpeg to the system path — er_add_ffmpeg_path","text":"TRUE success, invisibly","code":""},{"path":"/reference/er_audio_track.html","id":null,"dir":"Reference","previous_headings":"","what":"Audio track — er_audio_track","title":"Audio track — er_audio_track","text":"difference er_audio_track er_layer_audio() er_audio_track continue play across multiple clips can start stop whenever needed.","code":""},{"path":"/reference/er_audio_track.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Audio track — er_audio_track","text":"","code":"er_audio_track(path, cut_from, cut_to, start, mix_volume)"},{"path":"/reference/er_audio_track.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Audio track — er_audio_track","text":"path string: path audio file cut_from numeric: time value cut , seconds cut_to numeric: time value cut , seconds start numeric: many seconds video audio track start? (default = 0) mix_volume numeric: relative volume mixing video's audio track others (default = 1)","code":""},{"path":"/reference/er_audio_track.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Audio track — er_audio_track","text":"list class er_audio_track","code":""},{"path":"/reference/er_audio_track.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Audio track — er_audio_track","text":"https://github.com/mifi/editly/","code":""},{"path":[]},{"path":"/reference/er_clip_pause.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenience functions for clips — er_clip_pause","title":"Convenience functions for clips — er_clip_pause","text":"er_clip_* functions wrapper around corresponding er_layer_* function, creating er_clip object structure er_clip(duration, transition, layer), : transition optional added appears ... parameters layer created via er_layer_* function, passing appropriate parameters ...","code":""},{"path":"/reference/er_clip_pause.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenience functions for clips — er_clip_pause","text":"","code":"er_clip_pause(duration, ...)  er_clip_title(duration, ...)  er_clip_title_background(duration, ...)  er_clip_image(duration, ...)  er_clip_image_overlay(duration, ...)  er_clip_subtitle(duration, ...)  er_clip_news_title(duration, ...)  er_clip_slide_in_text(duration, ...)  er_clip_fill_color(duration, ...)  er_clip_radial_gradient(duration, ...)  er_clip_linear_gradient(duration, ...)  er_clip_rainbow_colors(duration, ...)  er_clip_video(duration, ...)  er_clip_audio(duration, ...)  er_clip_title2(duration, ...)"},{"path":"/reference/er_clip_pause.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenience functions for clips — er_clip_pause","text":"duration numeric: duration seconds ... : corresponding er_layer_* function","code":""},{"path":"/reference/er_clip_pause.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convenience functions for clips — er_clip_pause","text":"list class er_clip","code":""},{"path":"/reference/er_clip_pause.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convenience functions for clips — er_clip_pause","text":"er_clip_title2 er_clip_title automatically inserts er_layer_fill_color layer underneath title, fix font rendering issues (see https://github.com/mifi/editly/issues/84)","code":""},{"path":"/reference/er_clip_pause.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convenience functions for clips — er_clip_pause","text":"https://github.com/mifi/editly/","code":""},{"path":[]},{"path":"/reference/er_exec_docker.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute editly in docker image — er_exec_docker","title":"Execute editly in docker image — er_exec_docker","text":"require node editly installed system, instead requires Docker running pulled suitable editly docker image. default scienceuntangled/editly, uses modified version editly. editly docker images can used, support logo_* parameters er_header er_spec.","code":""},{"path":"/reference/er_exec_docker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute editly in docker image — er_exec_docker","text":"","code":"er_exec_docker(   spec,   docker_image = \"scienceuntangled/editly\",   fast = FALSE,   extra_docker_args )"},{"path":"/reference/er_exec_docker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute editly in docker image — er_exec_docker","text":"spec er_spec: er_spec object returned er_spec() docker_image string: name docker image use fast logical: TRUE, run editly 'fast' (low quality/preview) mode extra_docker_args character: additional arguments pass docker command, e.g. extra_docker_args = c(\"--cpu-shares\", \"512\") limit docker containiner's CPU priority CPU cycles limited (see https://docs.docker.com/config/containers/resource_constraints/)","code":""},{"path":"/reference/er_exec_docker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute editly in docker image — er_exec_docker","text":"0 success (invisibly)","code":""},{"path":"/reference/er_exec_docker.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Execute editly in docker image — er_exec_docker","text":"https://github.com/mifi/editly/","code":""},{"path":"/reference/er_exec_docker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute editly in docker image — er_exec_docker","text":"","code":"if (FALSE) {   clips <- list(er_clip_title2(duration = 3, text = \"Title slide\"),                 er_clip_image(duration = 3, path = \"https://jeroen.github.io/images/Rlogo.png\"))   outfile <- tempfile(fileext = \".mp4\")   my_spec <- er_spec(clips = clips , out_path = outfile, allow_remote_requests = TRUE)   er_exec_docker(my_spec)   if (interactive()) browseURL(outfile) }"},{"path":"/reference/er_exec_wait.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute editly — er_exec_wait","title":"Execute editly — er_exec_wait","text":"Execute editly","code":""},{"path":"/reference/er_exec_wait.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute editly — er_exec_wait","text":"","code":"er_exec_wait(spec, fast = FALSE, ...)"},{"path":"/reference/er_exec_wait.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute editly — er_exec_wait","text":"spec er_spec string: er_spec object, string giving path JSON file JSON string, returned er_spec() fast logical: TRUE, run editly 'fast' (low quality/preview) mode ... : JSON file used, can provide command line arguments individual parameters","code":""},{"path":"/reference/er_exec_wait.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute editly — er_exec_wait","text":"0 success (invisibly)","code":""},{"path":"/reference/er_exec_wait.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Execute editly — er_exec_wait","text":"https://github.com/mifi/editly/","code":""},{"path":"/reference/er_exec_wait.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute editly — er_exec_wait","text":"","code":"if (FALSE) {   clips <- list(er_clip_title2(duration = 3, text = \"Title slide\"),                 er_clip_image(duration = 3, path = \"https://jeroen.github.io/images/Rlogo.png\"))   outfile <- tempfile(fileext = \".mp4\")   my_spec <- er_spec(clips = clips , out_path = outfile, allow_remote_requests = TRUE)   er_exec_wait(my_spec)   if (interactive()) browseURL(outfile) }"},{"path":"/reference/er_ffmpeg_exe.html","id":null,"dir":"Reference","previous_headings":"","what":"Path to the ffmpeg executable — er_ffmpeg_exe","title":"Path to the ffmpeg executable — er_ffmpeg_exe","text":"Path ffmpeg executable","code":""},{"path":"/reference/er_ffmpeg_exe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Path to the ffmpeg executable — er_ffmpeg_exe","text":"","code":"er_ffmpeg_exe()"},{"path":"/reference/er_ffmpeg_exe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Path to the ffmpeg executable — er_ffmpeg_exe","text":"path executable, NULL found","code":""},{"path":[]},{"path":"/reference/er_ffmpeg_exe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Path to the ffmpeg executable — er_ffmpeg_exe","text":"","code":"er_ffmpeg_exe() #>            ffmpeg  #> \"/usr/bin/ffmpeg\""},{"path":"/reference/er_install_editly.html","id":null,"dir":"Reference","previous_headings":"","what":"Install the editly node package — er_install_editly","title":"Install the editly node package — er_install_editly","text":"Editry requires editly (underlying nodeJS package) available system, along node ffmpeg. can either installed directly system, docker image. er_install_editly attempt install node, ffmpeg, editly directly system. See package overview https://scienceuntangled.github.io/editry docker-based installation.","code":""},{"path":"/reference/er_install_editly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install the editly node package — er_install_editly","text":"","code":"er_install_editly(force = FALSE, dependencies = TRUE)"},{"path":"/reference/er_install_editly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install the editly node package — er_install_editly","text":"force logical: TRUE, force reinstallation editly already installed dependencies logical: TRUE, system binaries node (via noder::nr_install_node()) ffmpeg (via er_install_ffmpeg()) also installed found system","code":""},{"path":"/reference/er_install_editly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Install the editly node package — er_install_editly","text":"path installation (invisibly)","code":""},{"path":"/reference/er_install_editly.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Install the editly node package — er_install_editly","text":"https://github.com/scienceuntangled/editly/","code":""},{"path":"/reference/er_install_ffmpeg.html","id":null,"dir":"Reference","previous_headings":"","what":"Install ffmpeg — er_install_ffmpeg","title":"Install ffmpeg — er_install_ffmpeg","text":"helper function install ffmpeg. Currently works Windows Linux platforms. ffmpeg bundle downloaded https://github.com/BtbN/FFmpeg-Builds/releases/latest (Windows) https://johnvansickle.com/ffmpeg/ (Linux) saved user appdata directory.","code":""},{"path":"/reference/er_install_ffmpeg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install ffmpeg — er_install_ffmpeg","text":"","code":"er_install_ffmpeg(force = FALSE, bits, check_hash = TRUE)"},{"path":"/reference/er_install_ffmpeg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install ffmpeg — er_install_ffmpeg","text":"force logical: force reinstallation ffmpeg already exists bits integer: 32 64, 32- 64-bit install. missing NULL, guessed based .Machine$sizeof.pointer. Note 64-bit supported Windows check_hash logical: check hash downloaded file. Ignored windows","code":""},{"path":"/reference/er_install_ffmpeg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Install ffmpeg — er_install_ffmpeg","text":"path installed executable","code":""},{"path":"/reference/er_install_ffmpeg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Install ffmpeg — er_install_ffmpeg","text":"https://github.com/BtbN/FFmpeg-Builds/releases/latest https://johnvansickle.com/ffmpeg/","code":""},{"path":"/reference/er_install_ffmpeg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install ffmpeg — er_install_ffmpeg","text":"","code":"if (FALSE) {   er_install_ffmpeg() }"},{"path":"/reference/er_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Create various sections of an editly spec — er_layer","title":"Create various sections of an editly spec — er_layer","text":"Create various sections editly spec","code":""},{"path":"/reference/er_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create various sections of an editly spec — er_layer","text":"","code":"er_layer(type, ...)  er_clip(duration, transition, layers)  er_defaults(transition, layer, layer_type)  er_header(   out_path = tempfile(fileext = \".mp4\"),   fps,   width,   height,   allow_remote_requests,   audio_file_path,   loop_audio,   keep_source_audio,   clips_audio_volume,   output_volume,   audio_norm.enable,   audio_norm.gauss_size,   audio_norm.max_gain,   defaults,   custom_output_args,   logo_path,   logo_width,   logo_height,   logo_x,   logo_y )"},{"path":"/reference/er_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create various sections of an editly spec — er_layer","text":"type string: layer type (e.g. \"title\", \"image\", \"video\") ... : parameters duration numeric: duration seconds transition list: er_transition() object layers list: list er_layer objects layer list: default layer spec layer_type list: default layerType spec out_path string: path video file create (file extension can video file extension \".gif\") fps numeric: frames per second (default = 25 FPS first video) width integer: video width (default = 640) height integer: auto based width aspect ratio first video allow_remote_requests logical: allow remote URLs paths? (default = FALSE) audio_file_path string: set audio track whole video loop_audio logical: loop audio track shorter video? (default = FALSE) keep_source_audio logical: keep source audio clips? (default = FALSE) clips_audio_volume numeric: volume audio clips relative er_audio_track()s (default = 1) output_volume numeric string: adjust output volume (final stage). e.g. 0.5 \"10dB\" (default = 1) audio_norm.enable logical: enable audio normalization? (default = FALSE) audio_norm.gauss_size numeric: audio normalization gauss size (default = 5) audio_norm.max_gain numeric: audio normalization max gain (default = 30) defaults er_defaults: returned er_defaults() custom_output_args character: vector custom output codec/format arguments ffmpeg logo_path string: path logo file. must local file, even allow_remote_requests TRUE. logo_path ignored out_path gif logo_width numeric: width logo relative screen width (0 1, default = 0.2). one logo height width specified, logo aspect ratio retained logo_height numeric: height logo relative screen width (0 1, default = 0.1). one logo height width specified, logo aspect ratio retained logo_x numeric: logo left-hand-edge position relative left screen (0 = left 1 = right, default = 0.78). logo referenced relative left-hand edge, default 0.78 width 0.2 puts right-hand edge 0.98 logo_y numeric: logo bottom-edge position relative top screen (0 = top 1 = bottom, default = 0.98)","code":""},{"path":"/reference/er_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create various sections of an editly spec — er_layer","text":"list class er_clip, er_layer, etc","code":""},{"path":"/reference/er_layer.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create various sections of an editly spec — er_layer","text":"https://github.com/mifi/editly/","code":""},{"path":[]},{"path":"/reference/er_layer_pause.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard layer types — er_layer_pause","title":"Standard layer types — er_layer_pause","text":"position can one either: top, bottom center, top-left, top-right, center-left, center-right, bottom-left, bottom-right list object x, y, originX = 'left', originY = 'top' ,  x: 0, y: 0  upper left corner screen,  x: 1, y: 1  lower right corner, x relative video width, y video height. originX originY optional, specify position's origin (anchor position) object.","code":""},{"path":"/reference/er_layer_pause.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard layer types — er_layer_pause","text":"","code":"er_layer_pause(color)  er_layer_image(path, resize_mode, zoom_direction, zoom_amount)  er_layer_image_overlay(   path,   position,   width,   height,   zoom_direction,   zoom_amount )  er_layer_title(   text,   font_path,   text_color,   position,   zoom_direction,   zoom_amount )  er_layer_subtitle(text, font_path, text_color)  er_layer_title_background(text, font_path, text_color, background)  er_layer_news_title(text, font_path, text_color, background_color, position)  er_layer_slide_in_text(   text,   font_path,   font_size,   char_spacing,   color,   position )  er_layer_fill_color(color)  er_layer_radial_gradient(colors)  er_layer_linear_gradient(colors)  er_layer_rainbow_colors()  er_layer_video(   path,   resize_mode,   cut_from,   cut_to,   width,   height,   left,   top,   origin_x,   origin_y,   mix_volume )  er_layer_audio(path, cut_from, cut_to, mix_volume)  er_layer_detached_audio(path, cut_from, cut_to, start, mix_volume)"},{"path":"/reference/er_layer_pause.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standard layer types — er_layer_pause","text":"color string: slide color (default = random) path string: path image video file resize_mode : see Details zoom_direction string: \"\", \", \"null\" disable zoom_amount numeric: amount zoom (default = 0.1) position string list: see Details width numeric: width (0 1) 1 screen width height numeric: height (0 1) 1 screen height text string: text show font_path string: path font text_color string: text color background er_layer: returned er_layer_radial_gradient(), er_layer_linear_gradient(), er_layer_fill_color() background_color string: background color font_size numeric: font size char_spacing numeric: character spacing colors character: vector two colors (default = random) cut_from numeric: time value cut , seconds cut_to numeric: time value cut , seconds left numeric: X-position relative screen width (0 1, default = 0) top numeric: Y-position relative screen height (0 1, default = 0) origin_x numeric: X anchor (\"left\" \"right\", default = \"left\") origin_y numeric: Y anchor (\"top\" \"bottom\", default = \"top\") mix_volume numeric: relative volume mixing video's audio track others (default = 1) start numeric: many seconds clip audio track start? (default = 0)","code":""},{"path":"/reference/er_layer_pause.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standard layer types — er_layer_pause","text":"list class er_layer","code":""},{"path":"/reference/er_layer_pause.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standard layer types — er_layer_pause","text":"Audio layers mixed together. cutFrom/cutTo set, resulting segment (cutTo-cutFrom) slowed/sped-fit clip.duration. slow /speed-operation limited values 0.5x 100x. er_layer_detached_audio special case audio_tracks makes easier start audio relative clips start times without calculate global start times. detached audio exact properties audio_tracks, except start time relative clip's start. video layers, parent clip.duration specified, video slowed/sped-match clip.duration. cutFrom/cutTo set, resulting segment (cutTo-cutFrom) slowed/sped-fit clip.duration. layer audio, kept (mixed audio layers present.) resize_mode - fit image screen. Can one : \"contain\" - video contained within frame letterboxed \"contain-blur\" - Like contain, blurred copy letterbox \"cover\" - Video cropped cover whole screen (aspect ratio preserved) \"stretch\" - Video stretched cover whole screen (aspect ratio ignored). Default \"contain-blur\".","code":""},{"path":"/reference/er_layer_pause.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Standard layer types — er_layer_pause","text":"https://github.com/mifi/editly/","code":""},{"path":[]},{"path":"/reference/er_spec.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a spec ready for compiling to video — er_spec","title":"Create a spec ready for compiling to video — er_spec","text":"Create spec ready compiling video","code":""},{"path":"/reference/er_spec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a spec ready for compiling to video — er_spec","text":"","code":"er_spec(   header,   clips,   audio_tracks,   theme = \"er_theme_default\",   as = \"object\",   ... )"},{"path":"/reference/er_spec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a spec ready for compiling to video — er_spec","text":"header er_header: returned er_header(). Alternatively, specify header argument pass named header parameters separately clips list: list er_clip objects returned er_clip() audio_tracks list: list er_audio_track objects, returned er_audio_track() theme string: name theme function apply, NULL theme. theme set defaults, override defaults specified header string: either \"object\" (return object class er_spec, suitable pass er_to_json(), \"json\" (JSON string obtained er_to_json()) ... : er_header","code":""},{"path":"/reference/er_spec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a spec ready for compiling to video — er_spec","text":"list class er_spec JSON string","code":""},{"path":"/reference/er_spec.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create a spec ready for compiling to video — er_spec","text":"https://github.com/mifi/editly/","code":""},{"path":[]},{"path":"/reference/er_theme_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default editry theme — er_theme_default","title":"Default editry theme — er_theme_default","text":"Themes editry set defaults can supplied er_header() er_spec() functions.","code":""},{"path":"/reference/er_theme_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default editry theme — er_theme_default","text":"","code":"er_theme_default()"},{"path":"/reference/er_theme_default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default editry theme — er_theme_default","text":"object class er_defaults","code":""},{"path":"/reference/er_theme_default.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Default editry theme — er_theme_default","text":"default theme currently uses: white text, 'PatuaOne' font face black slide backgrounds plain slides, grey gradients radial linear gradient backgrounds red background news-title layers resize_mode \"contain\" images","code":""},{"path":[]},{"path":"/reference/er_to_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert editly spec to JSON string — er_to_json","title":"Convert editly spec to JSON string — er_to_json","text":"Convert editly spec JSON string","code":""},{"path":"/reference/er_to_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert editly spec to JSON string — er_to_json","text":"","code":"er_to_json(spec)"},{"path":"/reference/er_to_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert editly spec to JSON string — er_to_json","text":"spec string: JSON string returned er_spec()","code":""},{"path":"/reference/er_to_json.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert editly spec to JSON string — er_to_json","text":"JSON string","code":""},{"path":"/reference/er_transition.html","id":null,"dir":"Reference","previous_headings":"","what":"Clip transitions — er_transition","title":"Clip transitions — er_transition","text":"clip transitions outgoing transition clip.","code":""},{"path":"/reference/er_transition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clip transitions — er_transition","text":"","code":"er_transition(name, duration, audio_out_curve, audio_in_curve)"},{"path":"/reference/er_transition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clip transitions — er_transition","text":"name string: can transitions listed https://gl-transitions.com/gallery, \"directional-left\", \"directional-right\", \"directional-\", \"directional-\", \"random\", \" dummy\" duration numeric: duration seconds audio_out_curve string: fade curve audio cross fades (default = \"tri\") audio_in_curve string: fade curve audio cross fades (default = \"tri\")","code":""},{"path":"/reference/er_transition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clip transitions — er_transition","text":"list class er_transition","code":""},{"path":"/reference/er_transition.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Clip transitions — er_transition","text":"https://github.com/mifi/editly/","code":""},{"path":[]}]
